<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="NonlinearFactor_8h" kind="file" language="C++">
    <compoundname>NonlinearFactor.h</compoundname>
    <includes local="no">gtsam/nonlinear/Values.h</includes>
    <includes local="no">gtsam/linear/NoiseModel.h</includes>
    <includes local="no">gtsam/linear/JacobianFactor.h</includes>
    <includes local="no">gtsam/inference/Factor.h</includes>
    <includes local="no">gtsam/base/OptionalJacobian.h</includes>
    <includes local="no">boost/serialization/base_object.hpp</includes>
    <includes local="no">boost/assign/list_of.hpp</includes>
    <incdepgraph>
      <node id="15">
        <label>gtsam/linear/JacobianFactor.h</label>
      </node>
      <node id="17">
        <label>gtsam/base/OptionalJacobian.h</label>
      </node>
      <node id="12">
        <label>tests/doc-test-files/NonlinearFactor.h</label>
        <link refid="NonlinearFactor.h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>gtsam/inference/Factor.h</label>
      </node>
      <node id="14">
        <label>gtsam/linear/NoiseModel.h</label>
      </node>
      <node id="18">
        <label>boost/serialization/base_object.hpp</label>
      </node>
      <node id="19">
        <label>boost/assign/list_of.hpp</label>
      </node>
      <node id="13">
        <label>gtsam/nonlinear/Values.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classgtsam_1_1NonlinearFactor" prot="public">gtsam::NonlinearFactor</innerclass>
    <innerclass refid="structgtsam_1_1traits_3_01NonlinearFactor_01_4" prot="public">gtsam::traits&lt; NonlinearFactor &gt;</innerclass>
    <innerclass refid="classgtsam_1_1NoiseModelFactor" prot="public">gtsam::NoiseModelFactor</innerclass>
    <innerclass refid="classgtsam_1_1NoiseModelFactor1" prot="public">gtsam::NoiseModelFactor1</innerclass>
    <innerclass refid="classgtsam_1_1NoiseModelFactor2" prot="public">gtsam::NoiseModelFactor2</innerclass>
    <innerclass refid="classgtsam_1_1NoiseModelFactor3" prot="public">gtsam::NoiseModelFactor3</innerclass>
    <innerclass refid="classgtsam_1_1NoiseModelFactor4" prot="public">gtsam::NoiseModelFactor4</innerclass>
    <innerclass refid="classgtsam_1_1NoiseModelFactor5" prot="public">gtsam::NoiseModelFactor5</innerclass>
    <innerclass refid="classgtsam_1_1NoiseModelFactor6" prot="public">gtsam::NoiseModelFactor6</innerclass>
    <innernamespace refid="namespacegtsam">gtsam</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="NonlinearFactor_8h_1acd444d887da7c7f7107e8a5caa703b22" prot="public" static="no">
        <name>ADD_CLONE_NONLINEAR_FACTOR</name>
        <param><defname>Derived</defname></param>
        <initializer>virtual gtsam::NonlinearFactor::shared_ptr clone() const { \
  return std::static_pointer_cast&lt;<ref refid="classgtsam_1_1NonlinearFactor" kindref="compound">gtsam::NonlinearFactor</ref>&gt;( \
      gtsam::NonlinearFactor::shared_ptr(new Derived(*this))); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to add a standard clone function to a derived factor <xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>: will go away shortly - just add the clone function directly </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/doc-test-files/NonlinearFactor.h" line="36" column="9" bodyfile="tests/doc-test-files/NonlinearFactor.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Non-linear factor base classes. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Frank Dellaert </para></simplesect>
<simplesect kind="author"><para>Richard Roberts </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>GTSAM<sp/>Copyright<sp/>2010,<sp/>Georgia<sp/>Tech<sp/>Research<sp/>Corporation,</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Atlanta,<sp/>Georgia<sp/>30332-0415</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>All<sp/>Rights<sp/>Reserved</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Authors:<sp/>Frank<sp/>Dellaert,<sp/>et<sp/>al.<sp/>(see<sp/>THANKS<sp/>for<sp/>the<sp/>full<sp/>author<sp/>list)</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>See<sp/>LICENSE<sp/>for<sp/>the<sp/>license<sp/>information</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>--------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/>\callgraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtsam/nonlinear/Values.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtsam/linear/NoiseModel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtsam/linear/JacobianFactor.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtsam/inference/Factor.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtsam/base/OptionalJacobian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/serialization/base_object.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/assign/list_of.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="NonlinearFactor_8h_1acd444d887da7c7f7107e8a5caa703b22" refkind="member"><highlight class="preprocessor">#define<sp/>ADD_CLONE_NONLINEAR_FACTOR(Derived)<sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/>virtual<sp/>gtsam::NonlinearFactor::shared_ptr<sp/>clone()<sp/>const<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"><sp/><sp/>return<sp/>std::static_pointer_cast&lt;gtsam::NonlinearFactor&gt;(<sp/>\</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::NonlinearFactor::shared_ptr(new<sp/>Derived(*this)));<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegtsam" kindref="compound">gtsam</ref><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>boost::assign::cref_list_of;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*************************************************************************<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="classgtsam_1_1NonlinearFactor" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTSAM_EXPORT<sp/><ref refid="classgtsam_1_1NonlinearFactor" kindref="compound">NonlinearFactor</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Factor<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>handy<sp/>typedefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Factor<sp/>Base;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NonlinearFactor" kindref="compound">NonlinearFactor</ref><sp/><ref refid="classgtsam_1_1NonlinearFactor" kindref="compound">This</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;This&gt;<sp/>shared_ptr;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"></codeline>
<codeline lineno="68" refid="classgtsam_1_1NonlinearFactor_1a7c719ae67f222f66569ccb3b526cb9cb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classgtsam_1_1NonlinearFactor_1a7c719ae67f222f66569ccb3b526cb9cb" kindref="member">NonlinearFactor</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CONTAINER&gt;</highlight></codeline>
<codeline lineno="74" refid="classgtsam_1_1NonlinearFactor_1a8a7610dba7e9a6f878268c2769ea0e04" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classgtsam_1_1NonlinearFactor_1a8a7610dba7e9a6f878268c2769ea0e04" kindref="member">NonlinearFactor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CONTAINER&amp;<sp/>keys)<sp/>:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>Base(keys)<sp/>{}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KeyFormatter&amp;<sp/>keyFormatter<sp/>=<sp/>DefaultKeyFormatter)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NonlinearFactor" kindref="compound">NonlinearFactor</ref>&amp;<sp/>f,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tol<sp/>=<sp/>1e-9)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"></codeline>
<codeline lineno="92" refid="classgtsam_1_1NonlinearFactor_1ac457810c504de58732d51d61f715c2de" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NonlinearFactor_1ac457810c504de58732d51d61f715c2de" kindref="member">~NonlinearFactor</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Values&amp;<sp/>c)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dim()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="classgtsam_1_1NonlinearFactor_1a1968f471dc3ea33aaf0226ff7be5ae8c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NonlinearFactor_1a1968f471dc3ea33aaf0226ff7be5ae8c" kindref="member">active</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Values&amp;<sp/></highlight><highlight class="comment">/*c*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;GaussianFactor&gt;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>linearize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Values&amp;<sp/>c)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="classgtsam_1_1NonlinearFactor_1aa98a30a78ade8489214ce2e5b8302777" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>shared_ptr<sp/><ref refid="classgtsam_1_1NonlinearFactor_1aa98a30a78ade8489214ce2e5b8302777" kindref="member">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>choose<sp/>better<sp/>exception<sp/>to<sp/>throw<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;NonlinearFactor::clone():<sp/>Attempting<sp/>to<sp/>clone<sp/>factor<sp/>with<sp/>no<sp/>clone()<sp/>implemented!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shared_ptr();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>shared_ptr<sp/>rekey(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Key,Key&gt;&amp;<sp/>rekey_mapping)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>shared_ptr<sp/>rekey(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KeyVector&amp;<sp/>new_keys)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>\class<sp/>NonlinearFactor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="structgtsam_1_1traits_3_01NonlinearFactor_01_4" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">traits&lt;<ref refid="classgtsam_1_1NonlinearFactor" kindref="compound">NonlinearFactor</ref>&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Testable&lt;NonlinearFactor&gt;<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal">};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*************************************************************************<sp/>*/</highlight></codeline>
<codeline lineno="163" refid="classgtsam_1_1NoiseModelFactor" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTSAM_EXPORT<sp/><ref refid="classgtsam_1_1NoiseModelFactor" kindref="compound">NoiseModelFactor</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>NonlinearFactor<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handy<sp/>typedefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>NonlinearFactor<sp/>Base;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor" kindref="compound">NoiseModelFactor</ref><sp/><ref refid="classgtsam_1_1NonlinearFactor" kindref="compound">This</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>SharedNoiseModel<sp/>noiseModel_;<sp/></highlight></codeline>
<codeline lineno="173"><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="classgtsam_1_1NoiseModelFactor_1a57d98d52fb6f91ebc54d74746aeb90e4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;This&gt;<sp/><ref refid="classgtsam_1_1NoiseModelFactor_1a57d98d52fb6f91ebc54d74746aeb90e4" kindref="member">shared_ptr</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="classgtsam_1_1NoiseModelFactor_1ad6e8ef3348e042d598617d1d55f20300" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classgtsam_1_1NoiseModelFactor_1ad6e8ef3348e042d598617d1d55f20300" kindref="member">NoiseModelFactor</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="classgtsam_1_1NoiseModelFactor_1ae1ed5e0fa6c471b57172f7ebaf552187" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor_1ae1ed5e0fa6c471b57172f7ebaf552187" kindref="member">~NoiseModelFactor</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CONTAINER&gt;</highlight></codeline>
<codeline lineno="187" refid="classgtsam_1_1NoiseModelFactor_1a02cea97db30d27b51feaf1f0444d743c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classgtsam_1_1NoiseModelFactor_1a02cea97db30d27b51feaf1f0444d743c" kindref="member">NoiseModelFactor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SharedNoiseModel&amp;<sp/>noiseModel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CONTAINER&amp;<sp/>keys)<sp/>:</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>Base(keys),<sp/>noiseModel_(noiseModel)<sp/>{}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="classgtsam_1_1NoiseModelFactor_1a4605224417029e9dc58c5267efa9a46d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classgtsam_1_1NoiseModelFactor_1a4605224417029e9dc58c5267efa9a46d" kindref="member">NoiseModelFactor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SharedNoiseModel&amp;<sp/>noiseModel)<sp/>:<sp/>noiseModel_(noiseModel)<sp/>{}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KeyFormatter&amp;<sp/>keyFormatter<sp/>=<sp/>DefaultKeyFormatter)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NonlinearFactor&amp;<sp/>f,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tol<sp/>=<sp/>1e-9)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="classgtsam_1_1NoiseModelFactor_1af4f62b52fff1a0527ecdb279de023728" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor_1af4f62b52fff1a0527ecdb279de023728" kindref="member">dim</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>noiseModel_-&gt;dim();</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="classgtsam_1_1NoiseModelFactor_1a123e5729d70b4acd6d7e1f70b1a7ced4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SharedNoiseModel&amp;<sp/><ref refid="classgtsam_1_1NoiseModelFactor_1a123e5729d70b4acd6d7e1f70b1a7ced4" kindref="member">noiseModel</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>noiseModel_;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="classgtsam_1_1NoiseModelFactor_1a16a8a23069ce6ae664f516edc8f36254" refkind="member"><highlight class="normal"><sp/><sp/>SharedNoiseModel<sp/><ref refid="classgtsam_1_1NoiseModelFactor_1a16a8a23069ce6ae664f516edc8f36254" kindref="member">get_noiseModel</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>noiseModel_;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Vector<sp/>unwhitenedError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Values&amp;<sp/>x,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;std::vector&lt;Matrix&gt;&amp;&gt;<sp/>H<sp/>=<sp/>boost::none)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>Vector<sp/>whitenedError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Values&amp;<sp/>c)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Values&amp;<sp/>c)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;GaussianFactor&gt;<sp/>linearize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Values&amp;<sp/>x)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="classgtsam_1_1NoiseModelFactor_1ac98d07dd8f7b70e16ccb9a01abf56b9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">boost::serialization::access;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARCHIVE&gt;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialize(ARCHIVE<sp/>&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*version*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>ar<sp/>&amp;<sp/>boost::serialization::make_nvp(</highlight><highlight class="stringliteral">&quot;NonlinearFactor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::serialization::base_object&lt;Base&gt;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>ar<sp/>&amp;<sp/>BOOST_SERIALIZATION_NVP(noiseModel_);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>\class<sp/>NoiseModelFactor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*************************************************************************<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE&gt;</highlight></codeline>
<codeline lineno="276" refid="classgtsam_1_1NoiseModelFactor1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgtsam_1_1NoiseModelFactor1" kindref="compound">NoiseModelFactor1</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor" kindref="compound">NoiseModelFactor</ref><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>typedefs<sp/>for<sp/>value<sp/>types<sp/>pulled<sp/>from<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE<sp/>X;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor" kindref="compound">NoiseModelFactor</ref><sp/>Base;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor1" kindref="compound">NoiseModelFactor1&lt;VALUE&gt;</ref><sp/>This;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="classgtsam_1_1NoiseModelFactor1_1a85c649f81b216f5b5d7e321febc7762c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classgtsam_1_1NoiseModelFactor1_1a85c649f81b216f5b5d7e321febc7762c" kindref="member">NoiseModelFactor1</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classgtsam_1_1NoiseModelFactor1" kindref="compound">NoiseModelFactor1</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/>key()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[0];<sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="classgtsam_1_1NoiseModelFactor1_1a70a0b32dd5feba3631815614d8386c86" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classgtsam_1_1NoiseModelFactor1_1a70a0b32dd5feba3631815614d8386c86" kindref="member">NoiseModelFactor1</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SharedNoiseModel&amp;<sp/>noiseModel,<sp/>Key<sp/>key1)<sp/>:</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>Base(noiseModel,<sp/>cref_list_of&lt;1&gt;(key1))<sp/>{}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="classgtsam_1_1NoiseModelFactor1_1a886bb13688a62b2680c10cdaf7999918" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Vector<sp/><ref refid="classgtsam_1_1NoiseModelFactor1_1a886bb13688a62b2680c10cdaf7999918" kindref="member">unwhitenedError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Values&amp;<sp/>x,<sp/>boost::optional&lt;std::vector&lt;Matrix&gt;&amp;&gt;<sp/>H<sp/>=<sp/>boost::none)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;active(x))<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X&amp;<sp/>x1<sp/>=<sp/>x.at&lt;X&gt;(keys_[0]);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(H)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>evaluateError(x1,<sp/>(*H)[0]);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>evaluateError(x1);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector::Zero(this-&gt;dim());</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Vector<sp/>evaluateError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X&amp;<sp/>x,<sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H<sp/>=</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::none)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="classgtsam_1_1NoiseModelFactor1_1ac98d07dd8f7b70e16ccb9a01abf56b9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">boost::serialization::access;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARCHIVE&gt;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialize(ARCHIVE<sp/>&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*version*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>ar<sp/>&amp;<sp/>boost::serialization::make_nvp(</highlight><highlight class="stringliteral">&quot;NoiseModelFactor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::serialization::base_object&lt;Base&gt;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal">};</highlight><highlight class="comment">//<sp/>\class<sp/>NoiseModelFactor1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*************************************************************************<sp/>*/</highlight></codeline>
<codeline lineno="344"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE2&gt;</highlight></codeline>
<codeline lineno="345" refid="classgtsam_1_1NoiseModelFactor2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgtsam_1_1NoiseModelFactor2" kindref="compound">NoiseModelFactor2</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor" kindref="compound">NoiseModelFactor</ref><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>typedefs<sp/>for<sp/>value<sp/>types<sp/>pulled<sp/>from<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE1<sp/>X1;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE2<sp/>X2;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor" kindref="compound">NoiseModelFactor</ref><sp/>Base;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor2" kindref="compound">NoiseModelFactor2&lt;VALUE1, VALUE2&gt;</ref><sp/>This;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="classgtsam_1_1NoiseModelFactor2_1a04f5873776c784cafd55b4ac05b4b757" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classgtsam_1_1NoiseModelFactor2_1a04f5873776c784cafd55b4ac05b4b757" kindref="member">NoiseModelFactor2</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="classgtsam_1_1NoiseModelFactor2_1a35453b054509f5679a29a06b59340cf1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classgtsam_1_1NoiseModelFactor2_1a35453b054509f5679a29a06b59340cf1" kindref="member">NoiseModelFactor2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SharedNoiseModel&amp;<sp/>noiseModel,<sp/>Key<sp/>j1,<sp/>Key<sp/>j2)<sp/>:</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>Base(noiseModel,<sp/>cref_list_of&lt;2&gt;(j1)(j2))<sp/>{}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classgtsam_1_1NoiseModelFactor2" kindref="compound">NoiseModelFactor2</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="classgtsam_1_1NoiseModelFactor2_1ae3b88b40b4ee6e9af9eefcde77bf9768" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/><ref refid="classgtsam_1_1NoiseModelFactor2_1ae3b88b40b4ee6e9af9eefcde77bf9768" kindref="member">key1</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[0];<sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/>key2()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[1];<sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="382" refid="classgtsam_1_1NoiseModelFactor2_1a9640bbbb433383f0b40b5c2d9439415e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Vector<sp/><ref refid="classgtsam_1_1NoiseModelFactor2_1a9640bbbb433383f0b40b5c2d9439415e" kindref="member">unwhitenedError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Values&amp;<sp/>x,<sp/>boost::optional&lt;std::vector&lt;Matrix&gt;&amp;&gt;<sp/>H<sp/>=<sp/>boost::none)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;active(x))<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X1&amp;<sp/>x1<sp/>=<sp/>x.at&lt;X1&gt;(keys_[0]);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X2&amp;<sp/>x2<sp/>=<sp/>x.at&lt;X2&gt;(keys_[1]);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(H)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>evaluateError(x1,<sp/>x2,<sp/>(*H)[0],<sp/>(*H)[1]);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>evaluateError(x1,<sp/>x2);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector::Zero(this-&gt;dim());</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Vector</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>evaluateError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X1&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X2&amp;,<sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H1<sp/>=</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::none,<sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H2<sp/>=<sp/>boost::none)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="classgtsam_1_1NoiseModelFactor2_1ac98d07dd8f7b70e16ccb9a01abf56b9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">boost::serialization::access;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARCHIVE&gt;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialize(ARCHIVE<sp/>&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*version*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>ar<sp/>&amp;<sp/>boost::serialization::make_nvp(</highlight><highlight class="stringliteral">&quot;NoiseModelFactor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::serialization::base_object&lt;Base&gt;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>\class<sp/>NoiseModelFactor2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*************************************************************************<sp/>*/</highlight></codeline>
<codeline lineno="419"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE3&gt;</highlight></codeline>
<codeline lineno="420" refid="classgtsam_1_1NoiseModelFactor3" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgtsam_1_1NoiseModelFactor3" kindref="compound">NoiseModelFactor3</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor" kindref="compound">NoiseModelFactor</ref><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>typedefs<sp/>for<sp/>value<sp/>types<sp/>pulled<sp/>from<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE1<sp/>X1;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE2<sp/>X2;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE3<sp/>X3;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor" kindref="compound">NoiseModelFactor</ref><sp/>Base;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor3" kindref="compound">NoiseModelFactor3&lt;VALUE1, VALUE2, VALUE3&gt;</ref><sp/>This;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="439" refid="classgtsam_1_1NoiseModelFactor3_1a0bf4383cea2cdb0d263e570e98499ac7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classgtsam_1_1NoiseModelFactor3_1a0bf4383cea2cdb0d263e570e98499ac7" kindref="member">NoiseModelFactor3</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="448" refid="classgtsam_1_1NoiseModelFactor3_1ac2a8e8247e7d55768915fac27a4c078c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classgtsam_1_1NoiseModelFactor3_1ac2a8e8247e7d55768915fac27a4c078c" kindref="member">NoiseModelFactor3</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SharedNoiseModel&amp;<sp/>noiseModel,<sp/>Key<sp/>j1,<sp/>Key<sp/>j2,<sp/>Key<sp/>j3)<sp/>:</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>Base(noiseModel,<sp/>cref_list_of&lt;3&gt;(j1)(j2)(j3))<sp/>{}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classgtsam_1_1NoiseModelFactor3" kindref="compound">NoiseModelFactor3</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="454" refid="classgtsam_1_1NoiseModelFactor3_1a535f2bec61538509696513b2ab6bbf0b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/><ref refid="classgtsam_1_1NoiseModelFactor3_1a535f2bec61538509696513b2ab6bbf0b" kindref="member">key1</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[0];<sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/>key2()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[1];<sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/>key3()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[2];<sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="460" refid="classgtsam_1_1NoiseModelFactor3_1aab8e3316ef77cecc1bd1909a2c0eed33" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Vector<sp/><ref refid="classgtsam_1_1NoiseModelFactor3_1aab8e3316ef77cecc1bd1909a2c0eed33" kindref="member">unwhitenedError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Values&amp;<sp/>x,<sp/>boost::optional&lt;std::vector&lt;Matrix&gt;&amp;&gt;<sp/>H<sp/>=<sp/>boost::none)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;active(x))<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(H)</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>evaluateError(x.at&lt;X1&gt;(keys_[0]),<sp/>x.at&lt;X2&gt;(keys_[1]),<sp/>x.at&lt;X3&gt;(keys_[2]),<sp/>(*H)[0],<sp/>(*H)[1],<sp/>(*H)[2]);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>evaluateError(x.at&lt;X1&gt;(keys_[0]),<sp/>x.at&lt;X2&gt;(keys_[1]),<sp/>x.at&lt;X3&gt;(keys_[2]));</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector::Zero(this-&gt;dim());</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Vector</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>evaluateError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X1&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X2&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X3&amp;,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H1<sp/>=<sp/>boost::none,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H2<sp/>=<sp/>boost::none,</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H3<sp/>=<sp/>boost::none)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="485" refid="classgtsam_1_1NoiseModelFactor3_1ac98d07dd8f7b70e16ccb9a01abf56b9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">boost::serialization::access;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARCHIVE&gt;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialize(ARCHIVE<sp/>&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*version*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>ar<sp/>&amp;<sp/>boost::serialization::make_nvp(</highlight><highlight class="stringliteral">&quot;NoiseModelFactor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::serialization::base_object&lt;Base&gt;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>\class<sp/>NoiseModelFactor3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*************************************************************************<sp/>*/</highlight></codeline>
<codeline lineno="496"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE3,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE4&gt;</highlight></codeline>
<codeline lineno="497" refid="classgtsam_1_1NoiseModelFactor4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgtsam_1_1NoiseModelFactor4" kindref="compound">NoiseModelFactor4</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor" kindref="compound">NoiseModelFactor</ref><sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>typedefs<sp/>for<sp/>value<sp/>types<sp/>pulled<sp/>from<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE1<sp/>X1;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE2<sp/>X2;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE3<sp/>X3;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE4<sp/>X4;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor" kindref="compound">NoiseModelFactor</ref><sp/>Base;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor4" kindref="compound">NoiseModelFactor4&lt;VALUE1, VALUE2, VALUE3, VALUE4&gt;</ref><sp/>This;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="classgtsam_1_1NoiseModelFactor4_1a65adc8d1272df63390168b26f4f7bc70" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classgtsam_1_1NoiseModelFactor4_1a65adc8d1272df63390168b26f4f7bc70" kindref="member">NoiseModelFactor4</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="527" refid="classgtsam_1_1NoiseModelFactor4_1a8ce3daa05897e12db9e38a9c96043ce3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classgtsam_1_1NoiseModelFactor4_1a8ce3daa05897e12db9e38a9c96043ce3" kindref="member">NoiseModelFactor4</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SharedNoiseModel&amp;<sp/>noiseModel,<sp/>Key<sp/>j1,<sp/>Key<sp/>j2,<sp/>Key<sp/>j3,<sp/>Key<sp/>j4)<sp/>:</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>Base(noiseModel,<sp/>cref_list_of&lt;4&gt;(j1)(j2)(j3)(j4))<sp/>{}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classgtsam_1_1NoiseModelFactor4" kindref="compound">NoiseModelFactor4</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="533" refid="classgtsam_1_1NoiseModelFactor4_1a4339880be87fa2a533aa07324481f7b6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/><ref refid="classgtsam_1_1NoiseModelFactor4_1a4339880be87fa2a533aa07324481f7b6" kindref="member">key1</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[0];<sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/>key2()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[1];<sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/>key3()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[2];<sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/>key4()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[3];<sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="540" refid="classgtsam_1_1NoiseModelFactor4_1a6a79ae22fc40447c8dc183a951243440" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Vector<sp/><ref refid="classgtsam_1_1NoiseModelFactor4_1a6a79ae22fc40447c8dc183a951243440" kindref="member">unwhitenedError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Values&amp;<sp/>x,<sp/>boost::optional&lt;std::vector&lt;Matrix&gt;&amp;&gt;<sp/>H<sp/>=<sp/>boost::none)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;active(x))<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(H)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>evaluateError(x.at&lt;X1&gt;(keys_[0]),<sp/>x.at&lt;X2&gt;(keys_[1]),<sp/>x.at&lt;X3&gt;(keys_[2]),<sp/>x.at&lt;X4&gt;(keys_[3]),<sp/>(*H)[0],<sp/>(*H)[1],<sp/>(*H)[2],<sp/>(*H)[3]);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>evaluateError(x.at&lt;X1&gt;(keys_[0]),<sp/>x.at&lt;X2&gt;(keys_[1]),<sp/>x.at&lt;X3&gt;(keys_[2]),<sp/>x.at&lt;X4&gt;(keys_[3]));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector::Zero(this-&gt;dim());</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Vector</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>evaluateError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X1&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X2&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X3&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X4&amp;,</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H1<sp/>=<sp/>boost::none,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H2<sp/>=<sp/>boost::none,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H3<sp/>=<sp/>boost::none,</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H4<sp/>=<sp/>boost::none)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="566" refid="classgtsam_1_1NoiseModelFactor4_1ac98d07dd8f7b70e16ccb9a01abf56b9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">boost::serialization::access;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARCHIVE&gt;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialize(ARCHIVE<sp/>&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*version*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>ar<sp/>&amp;<sp/>boost::serialization::make_nvp(</highlight><highlight class="stringliteral">&quot;NoiseModelFactor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::serialization::base_object&lt;Base&gt;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>\class<sp/>NoiseModelFactor4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*************************************************************************<sp/>*/</highlight></codeline>
<codeline lineno="577"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE3,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE4,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE5&gt;</highlight></codeline>
<codeline lineno="578" refid="classgtsam_1_1NoiseModelFactor5" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgtsam_1_1NoiseModelFactor5" kindref="compound">NoiseModelFactor5</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor" kindref="compound">NoiseModelFactor</ref><sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>typedefs<sp/>for<sp/>value<sp/>types<sp/>pulled<sp/>from<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE1<sp/>X1;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE2<sp/>X2;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE3<sp/>X3;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE4<sp/>X4;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE5<sp/>X5;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor" kindref="compound">NoiseModelFactor</ref><sp/>Base;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor5" kindref="compound">NoiseModelFactor5&lt;VALUE1, VALUE2, VALUE3, VALUE4, VALUE5&gt;</ref><sp/>This;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="599" refid="classgtsam_1_1NoiseModelFactor5_1a424c4633f6c1907d0dd3381cffbed82a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classgtsam_1_1NoiseModelFactor5_1a424c4633f6c1907d0dd3381cffbed82a" kindref="member">NoiseModelFactor5</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="610" refid="classgtsam_1_1NoiseModelFactor5_1a01d2e8a5253a67ceac02320a719c5280" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classgtsam_1_1NoiseModelFactor5_1a01d2e8a5253a67ceac02320a719c5280" kindref="member">NoiseModelFactor5</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SharedNoiseModel&amp;<sp/>noiseModel,<sp/>Key<sp/>j1,<sp/>Key<sp/>j2,<sp/>Key<sp/>j3,<sp/>Key<sp/>j4,<sp/>Key<sp/>j5)<sp/>:</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>Base(noiseModel,<sp/>cref_list_of&lt;5&gt;(j1)(j2)(j3)(j4)(j5))<sp/>{}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classgtsam_1_1NoiseModelFactor5" kindref="compound">NoiseModelFactor5</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="616" refid="classgtsam_1_1NoiseModelFactor5_1a23886196ba086677b1e2168e17a34280" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/><ref refid="classgtsam_1_1NoiseModelFactor5_1a23886196ba086677b1e2168e17a34280" kindref="member">key1</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[0];<sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/>key2()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[1];<sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/>key3()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[2];<sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/>key4()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[3];<sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/>key5()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[4];<sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="624" refid="classgtsam_1_1NoiseModelFactor5_1a701b7a764f18310b4eea14ee023c922b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Vector<sp/><ref refid="classgtsam_1_1NoiseModelFactor5_1a701b7a764f18310b4eea14ee023c922b" kindref="member">unwhitenedError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Values&amp;<sp/>x,<sp/>boost::optional&lt;std::vector&lt;Matrix&gt;&amp;&gt;<sp/>H<sp/>=<sp/>boost::none)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;active(x))<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(H)</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>evaluateError(x.at&lt;X1&gt;(keys_[0]),<sp/>x.at&lt;X2&gt;(keys_[1]),<sp/>x.at&lt;X3&gt;(keys_[2]),<sp/>x.at&lt;X4&gt;(keys_[3]),<sp/>x.at&lt;X5&gt;(keys_[4]),<sp/>(*H)[0],<sp/>(*H)[1],<sp/>(*H)[2],<sp/>(*H)[3],<sp/>(*H)[4]);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>evaluateError(x.at&lt;X1&gt;(keys_[0]),<sp/>x.at&lt;X2&gt;(keys_[1]),<sp/>x.at&lt;X3&gt;(keys_[2]),<sp/>x.at&lt;X4&gt;(keys_[3]),<sp/>x.at&lt;X5&gt;(keys_[4]));</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector::Zero(this-&gt;dim());</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Vector</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>evaluateError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X1&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X2&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X3&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X4&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X5&amp;,</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H1<sp/>=<sp/>boost::none,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H2<sp/>=<sp/>boost::none,</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H3<sp/>=<sp/>boost::none,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H4<sp/>=<sp/>boost::none,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H5<sp/>=<sp/>boost::none)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="651" refid="classgtsam_1_1NoiseModelFactor5_1ac98d07dd8f7b70e16ccb9a01abf56b9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">boost::serialization::access;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARCHIVE&gt;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialize(ARCHIVE<sp/>&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*version*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>ar<sp/>&amp;<sp/>boost::serialization::make_nvp(</highlight><highlight class="stringliteral">&quot;NoiseModelFactor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::serialization::base_object&lt;Base&gt;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>\class<sp/>NoiseModelFactor5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*************************************************************************<sp/>*/</highlight></codeline>
<codeline lineno="662"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE3,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE4,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE5,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUE6&gt;</highlight></codeline>
<codeline lineno="663" refid="classgtsam_1_1NoiseModelFactor6" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgtsam_1_1NoiseModelFactor6" kindref="compound">NoiseModelFactor6</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor" kindref="compound">NoiseModelFactor</ref><sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>typedefs<sp/>for<sp/>value<sp/>types<sp/>pulled<sp/>from<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE1<sp/>X1;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE2<sp/>X2;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE3<sp/>X3;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE4<sp/>X4;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE5<sp/>X5;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VALUE6<sp/>X6;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor" kindref="compound">NoiseModelFactor</ref><sp/>Base;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgtsam_1_1NoiseModelFactor6" kindref="compound">NoiseModelFactor6&lt;VALUE1, VALUE2, VALUE3, VALUE4, VALUE5, VALUE6&gt;</ref><sp/>This;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="685" refid="classgtsam_1_1NoiseModelFactor6_1a15bcca054e397e486fb9dda0d0436cdb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classgtsam_1_1NoiseModelFactor6_1a15bcca054e397e486fb9dda0d0436cdb" kindref="member">NoiseModelFactor6</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="697" refid="classgtsam_1_1NoiseModelFactor6_1ad3d89a85f0c70d7a424f2060d514cab9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classgtsam_1_1NoiseModelFactor6_1ad3d89a85f0c70d7a424f2060d514cab9" kindref="member">NoiseModelFactor6</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SharedNoiseModel&amp;<sp/>noiseModel,<sp/>Key<sp/>j1,<sp/>Key<sp/>j2,<sp/>Key<sp/>j3,<sp/>Key<sp/>j4,<sp/>Key<sp/>j5,<sp/>Key<sp/>j6)<sp/>:</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>Base(noiseModel,<sp/>cref_list_of&lt;6&gt;(j1)(j2)(j3)(j4)(j5)(j6))<sp/>{}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classgtsam_1_1NoiseModelFactor6" kindref="compound">NoiseModelFactor6</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="703" refid="classgtsam_1_1NoiseModelFactor6_1a587ce14373742350ff30a78c856ecaa0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/><ref refid="classgtsam_1_1NoiseModelFactor6_1a587ce14373742350ff30a78c856ecaa0" kindref="member">key1</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[0];<sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/>key2()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[1];<sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/>key3()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[2];<sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/>key4()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[3];<sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/>key5()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[4];<sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Key<sp/>key6()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_[5];<sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="712" refid="classgtsam_1_1NoiseModelFactor6_1a945d269f9a722d585e3332be23030450" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Vector<sp/><ref refid="classgtsam_1_1NoiseModelFactor6_1a945d269f9a722d585e3332be23030450" kindref="member">unwhitenedError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Values&amp;<sp/>x,<sp/>boost::optional&lt;std::vector&lt;Matrix&gt;&amp;&gt;<sp/>H<sp/>=<sp/>boost::none)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;active(x))<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(H)</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>evaluateError(x.at&lt;X1&gt;(keys_[0]),<sp/>x.at&lt;X2&gt;(keys_[1]),<sp/>x.at&lt;X3&gt;(keys_[2]),<sp/>x.at&lt;X4&gt;(keys_[3]),<sp/>x.at&lt;X5&gt;(keys_[4]),<sp/>x.at&lt;X6&gt;(keys_[5]),<sp/>(*H)[0],<sp/>(*H)[1],<sp/>(*H)[2],<sp/>(*H)[3],<sp/>(*H)[4],<sp/>(*H)[5]);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>evaluateError(x.at&lt;X1&gt;(keys_[0]),<sp/>x.at&lt;X2&gt;(keys_[1]),<sp/>x.at&lt;X3&gt;(keys_[2]),<sp/>x.at&lt;X4&gt;(keys_[3]),<sp/>x.at&lt;X5&gt;(keys_[4]),<sp/>x.at&lt;X6&gt;(keys_[5]));</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector::Zero(this-&gt;dim());</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Vector</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>evaluateError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X1&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X2&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X3&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X4&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X5&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X6&amp;,</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H1<sp/>=<sp/>boost::none,</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H2<sp/>=<sp/>boost::none,</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H3<sp/>=<sp/>boost::none,</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H4<sp/>=<sp/>boost::none,</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H5<sp/>=<sp/>boost::none,</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::optional&lt;Matrix&amp;&gt;<sp/>H6<sp/>=<sp/>boost::none)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="740" refid="classgtsam_1_1NoiseModelFactor6_1ac98d07dd8f7b70e16ccb9a01abf56b9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">boost::serialization::access;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARCHIVE&gt;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialize(ARCHIVE<sp/>&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*version*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>ar<sp/>&amp;<sp/>boost::serialization::make_nvp(</highlight><highlight class="stringliteral">&quot;NoiseModelFactor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::serialization::base_object&lt;Base&gt;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>\class<sp/>NoiseModelFactor6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*************************************************************************<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>\namespace<sp/>gtsam</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="tests/doc-test-files/NonlinearFactor.h"/>
  </compounddef>
</doxygen>
